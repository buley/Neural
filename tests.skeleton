Application.test.data.add = function ( count, on_success, on_error ) {
	var map = [];
	for( var i = 0; i < count; i++ ) {
		var node1 = Math.floor( Math.random()*100 );	
		var node2 = Math.floor( Math.random()*100 );	
		Application.namespace.add( { 'data': { 'type': 'connection', 'from': node1, 'to': node2, 'strength': Math.random() }, 'on_success': function( result_value ) {
			if( !!Application.debug ) {
				console.log( 'Added synapse', result_value );
			}
			on_success( result_value );
		}, 'on_error': function( context ) {
			if( !!Application.debug ) {
				console.log( 'Failed to add namespace', context ); 
			}
			on_error( context );
		} } );
	}
}

Application.test.getAttr = function( test_callback ) {
	var on_error = function( test_callback ) {
		console.log( 'Application.test.getAttr(): failed' );
		if( 'function' !== typeof test_callback ) {
			test_callback( value );
		}
	};
	Application.namespace.getAttr( {
		'key': test_id
		, 'index': 'id'
		, 'on_success': function( value ) {	
			if( 'undefined' !== value ) {
				console.log( 'Application.test.getAttr(): passed' );
			} else {
				console.log( 'Application.test.getAttr(): failed' );
			}
			if( 'function' !== typeof test_callback ) {
				test_callback( value );
			}
		}, 'on_error': on_error
	} );
	

};

Application.test.setAttr = function( test_callback ) {

	var on_error = function( value ) {
		console.log( 'Application.test.setAttr(): failed' );
		if( 'function' !== typeof test_callback ) {
			test_callback( value );
		}
	};
	Application.namespace.getAttr( {
		'key': test_id
		, 'index': 'id'
		, 'on_success': function( context ) {	
			var value = Application.row.value( context.event );	
			var expected =  {};
			var key = Application.namespace.shorthand( 'strength' );
			expected[ key ] = value[ key ];
			Application.namespace.setAttr( {
				'key': test_id
				, 'index': 'id'
				, 'expecting': expected
				, 'strength': function( current ) {
					var replacement = current / 2;
					replacement = ( !!replacement && replacement > .001 ) ? replacement : 1;
					return replacement;
				}, 'on_success': function( context ) {
					Application.namespace.getAttr( {
						'key': test_id
						, 'index': 'id'
						, 'on_success': function( value ) {
							if( 'undefined' !== typeof value ) {
								console.log( 'Application.test.setAttr(): passed' );
							} else {
								console.log( 'Application.test.setAttr(): failed' );
							}
							if( 'function' !== typeof test_callback ) {
								test_callback( value );
							}
						}, 'on_error': on_error 
					} );
				}, 'on_error': on_error
			} );

		}, 'on_error': on_error
	} );
	

};


Application.test.get = function( test_callback ) {

	var on_error = function( get_context ) {
		console.log( 'Application.test.get(): failed' );
		if( 'function' == typeof test_callback ) {
			test_callback( get_context );
		}
	};
	Application.namespace.get( {
		'key': test_id
		//, 'index': 'id'
		, 'on_success': function( value ) {	
			console.log( 'Application.test.get(): passed' );
			if( 'function' == typeof test_callback ) {
				test_callback( value );
			}
		}, 'on_error': on_error
	} );
	

};

Application.test.put = function( test_callback ) {

	var on_error = function( value ) {
		console.log( 'Application.test.put(): failed' );
		if( 'function' == typeof test_callback ) {
			test_callback( value );
		}
	};
	Application.namespace.get( {
		'key': test_id
		//, 'index': 'id'
		, 'on_success': function( new_value ) {
			new_value[ 'from' ] = ( isNaN( new_value[ 'from' ] ) ) ? 1 : new_value[ 'from' ];
			new_value[ 'from' ] = parseInt( new_value[ 'from' ], 10 ) + inc_amount;
			new_value[ 'to' ] = ( isNaN( new_value[ 'to' ] ) ) ? 1 : new_value[ 'to' ];
			new_value[ 'to' ] = parseInt( new_value[ 'to' ], 10 ) + inc_amount;
			Application.namespace.put( {
				'key': test_id
				, 'data': new_value
				, 'on_success': function( result_id ) {
					Application.namespace.get( {
						'key': result_id
						//, 'index': 'id'
						, 'on_success': function( return_value ) {
							if( 'undefined' !== typeof return_value[ 'from' ] && new_value[ 'from' ] == return_value[ 'from' ] && 'undefined' !== typeof return_value[ 'to' ] && new_value[ 'to' ] == return_value[ 'to' ] ) {	
								console.log( 'Application.test.put(): passed' );
							} else {
								console.log( 'Application.test.put(): failed', new_value, return_value );
							}
							if( 'function' == typeof test_callback ) {
								test_callback( return_value );
							}							
						}, 'on_error': on_error 
					} );
				}, 'on_error': on_error
			} );

		}, 'on_error': on_error
	} );	

};

Application.test.add = function( test_callback ) {

	var on_error = function( value ) {
		console.log( 'Application.test.add(): failed' );
		if( 'function' == typeof test_callback ) {
			test_callback( value );
		}
	};
	var new_value = {
		'to': 1
		, 'from': 1
		, 'type': 'connection'
		, 'strength': Math.random()
	};
	Application.namespace.add( {
		'data': new_value
		, 'on_success': function( add_value ) {
			Application.namespace.get( {
				'key': add_value
				//, 'index': 'id'
				, 'on_success': function( return_value ) {
					if( 'undefined' !== typeof return_value && null !== return_value && add_value == return_value.id ) {
						test_id = return_value;
						console.log( 'Application.test.add(): passed' );
					} else {
						console.log( 'Application.test.add(): failed' );
					}
					if( 'function' == typeof test_callback ) {
						test_callback( return_value );
					}							
				}, 'on_error': on_error 
			} );
		}, 'on_error': on_error
	} );

};


Application.test.update = function( test_callback ) {

	var on_error = function( value ) {
		console.log( 'Application.test.update(): failed' );
		if( 'function' == typeof test_callback ) {
			test_callback( value );
		}
	};
	Application.namespace.get( {
		'key': test_id
		//, 'index': 'id'
		, 'on_success': function( value ) {	
			var expected =  {};
			expected[ 'to' ] = value[ 'to' ];
			Application.namespace.update( {
				'key': test_id
				//, 'index': 'id'
				, 'expecting': expected
				, 'data': function( current ) {
					var val = {};
					val[ 'to' ] = parseInt( current[ 'to' ], 10 ) + inc_amount;
					return val;
				}, 'on_success': function( context ) {
					Application.namespace.get( {
						'key': test_id
						//, 'index': 'id'
						, 'on_success': function( returned_value ) {
							if( 'undefined' !== typeof returned_value && null !== returned_value && ( returned_value[ 'to' ] - inc_amount )  == expected[ 'to' ] ) {
								console.log( 'Application.test.update(): passed' );
							} else {
								console.log( 'Application.test.update(): failed' );
							}
							if( 'function' == typeof test_callback ) {
								test_callback( returned_value );
							}
						}, 'on_error': on_error 
					} );
				}, 'on_error': on_error
			} );

		}, 'on_error': on_error
	} );
	

};

Application.test.delete = function( test_callback ) {

	var on_error = function( value ) {
		console.log( 'Application.test.delete(): failed' );
		if( 'function' == typeof test_callback ) {
			test_callback( value );
		}
	};
	var new_value = {
		'to': 1
		, 'from': 1
		, 'type': 'connection'
		, 'strength': Math.random()
	};
	Application.namespace.add( {
		'data': new_value
		, 'on_success': function( add_value ) {
			Application.namespace.get( {
				'key': add_value
				//, 'index': 'id'
				, 'on_success': function( get_value_1 ) {
					Application.namespace.delete( {
						'key': add_value
						, 'on_success': function( delete_value ) {
							Application.namespace.get( {
								'key': add_value
								//, 'index': 'id'
								, 'on_error': on_error
								, 'on_success': function( context ) {
									var get_value_2 = Application.row.value( context );
									if( 'undefined' !== typeof get_value_2 && null == get_value_2 ) {
										console.log( 'Application.test.delete(): passed' );
									} else {
										console.log( 'Application.test.delete(): failed' );
									}
									if( 'function' == typeof test_callback ) {
										test_callback( get_value_2 );
									}
								} 
							} );
						}, 'on_error': on_error } );
				}, 'on_error': on_error } );
		}, 'on_error': on_error } );
};

/* Clear */

Application.test.clear = function( test_callback ) {

	var on_error = function( get_context ) {
		console.log( 'Application.test.clear(): failed' );
		if( 'function' == typeof test_callback ) {
			test_callback( get_context );
		}
	};
	var item_count = 0;
	Application.namespace.clear( {
		'on_success': function( value ) {	
			console.log( 'Application.test.cursor.clear(): passed' );
			if( 'function' == typeof test_callback ) {
				test_callback( value );
			}
		}, 'on_error': on_error
	} );
	

};

/* Cursor */

Application.test.cursor.get = function( test_callback ) {

	var on_error = function( get_context ) {
		console.log( 'Application.test.get(): failed' );
		if( 'function' == typeof test_callback ) {
			test_callback( get_context );
		}
	};
	var item_count = 0;
	Application.namespace.cursor.get( {
		'begin': 0
		, 'left_inclusive': true
		//, 'index': 'id'
		, 'limit': 20
		, 'direction': Application.cursor.direction.previous()
		, 'on_success': function( value ) {	
			item_count++;
		}, 'on_complete': function( value ) {	
			console.log( 'Application.test.cursor.get(): passed' );
			if( 'function' == typeof test_callback ) {
				test_callback( value );
			}
		}, 'on_error': on_error
	} );
	

};

Application.test.cursor.delete = function( test_callback ) {
	Application.test.data.add( 5 );
	var on_error = function( get_context ) {
		console.log( 'Application.test.delete(): failed' );
		if( 'function' == typeof test_callback ) {
			test_callback( get_context );
		}
	};
	var item_count = 0;
	var limit = 20;
	Application.namespace.cursor.get( {
		'begin': 0
		, 'left_inclusive': true
		//, 'index': 'id'
		//, 'limit': limit
		, 'direction': Application.cursor.direction.previous()
		, 'on_success': function( value ) {	
			item_count++;
		}, 'on_complete': function( value ) {	
			console.log("TOTAL", item_count );
			var delete_count = 0;
			Application.namespace.cursor.delete( {
				'begin': 0
				, 'left_inclusive': true
				//, 'index': 'id'
				//, 'limit': limit
				, 'direction': Application.cursor.direction.next()
				, 'on_success': function( value ) {	
					delete_count++;
				}, 'on_complete': function( value ) {	
				var final_count = 0;
					Application.namespace.cursor.get( {
						'begin': 0
						, 'left_inclusive': true
						//, 'index': 'id'
						//, 'limit': limit
						, 'direction': Application.cursor.direction.previous()
						, 'on_success': function( value ) {
							if( 'undefined' !== typeof value && null !== value ) {	
								final_count++;
							}
						}, 'on_complete': function( value ) {	
							if( 0 == final_count ) {
								console.log( 'Application.test.cursor.delete(): passed' );
							} else {
								console.log( 'Application.test.cursor.delete(): failed' );
							}
							if( 'function' == typeof test_callback ) {
								test_callback( value );
							}
						}
					} );
				}, 'on_error': on_error
			} );
		}, 'on_error': on_error
	} );
};

Application.test.cursor.update = function( test_callback ) {
	Application.test.data.add( 5 );
	var on_error = function( get_context ) {
		console.log( 'Application.test.update(): failed' );
		if( 'function' == typeof test_callback ) {
			test_callback( get_context );
		}
	};
	var item_count = 0;
	var limit = 20;
	var update_map = {};
	Application.namespace.cursor.update( {
		'begin': 0
		, 'left_inclusive': true
		//, 'index': 'id' //xxx
		, 'data': function( current_value ) {
			if( 'undefined' !== typeof current_value && null !== current_value && 'undefined' !== typeof current_value.strength ) {
				//var new_strength = ( 'undefined' !== typeof current_value.strength ) ? current_value.strength / 2 : 1;
				var new_strength = "123456";
				update_map[ current_value.id ] = new_strength;
				console.log("UPDATED FROM/TO",current_value.strength,new_strength);
				current_value.strength = new_strength;
			}

			return current_value;
		}//, 'limit': limit
		, 'direction': Application.cursor.direction.next()
		, 'on_success': function( value ) {	
			item_count++;
			console.log('updated');
		}, 'on_complete': function( value ) {	
			console.log("UPPITY",value);
			if( limit > 0 && item_count <= limit ) {
				console.log( 'Application.test.cursor.update(): passed', update_map );
			} else {
				console.log( 'Application.test.cursor.update(): failed. Counted ' + item_count + ' successes, expected ' + limit );
			}
			if( 'function' == typeof test_callback ) {
				test_callback( value );
			}
		}, 'on_error': on_error
	} );
};
